name: CI

on:
  pull_request:
    branches: [develop, main, release/**, feature/**, hotfix/**]
  push:
    branches: [develop]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      root: ${{ steps.filter.outputs.root }}
      api: ${{ steps.filter.outputs.api }}
      miniapp: ${{ steps.filter.outputs.miniapp }}
      bot: ${{ steps.filter.outputs.bot }}
      packages: ${{ steps.filter.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            root:
              - 'pnpm-lock.yaml'
              - 'package.json'
              - 'turbo.json'
              - '.github/**'
            api:
              - 'apps/api/**'
            miniapp:
              - 'apps/miniapp/**'
            bot:
              - 'apps/bot/**'
            packages:
              - 'packages/**'

  build_typecheck:
    name: Build & Typecheck
    needs: changes
    if: |
      needs.changes.outputs.root == 'true' ||
      needs.changes.outputs.api == 'true' ||
      needs.changes.outputs.miniapp == 'true' ||
      needs.changes.outputs.bot == 'true' ||
      needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Prisma Client (API)
        run: cd apps/api && pnpm prisma generate
      - name: Build all packages and applications
        run: pnpm -w build

  bundle_check:
    name: MiniApp bundle ≤ 220KB (gzip)
    needs: [changes, build_typecheck]
    if: needs.changes.outputs.miniapp == 'true' || needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build MiniApp for production
        run: pnpm -C apps/miniapp build
      - name: Assert bundle size ≤ 220KB gzipped
        run: |
          cat apps/miniapp/dist/assets/index-*.js | gzip | wc -c | awk '{
            kb=$1/1024; 
            printf("MiniApp gzipped bundle size: %.2f KB\n", kb); 
            if (kb > 220) { 
              printf("❌ Bundle too large! Must be ≤ 220KB\n"); 
              exit 1 
            } else {
              printf("✅ Bundle size within limits\n")
            }
          }'

  pact_contracts:
    name: Pact contracts (consumer/provider)
    needs: [changes, build_typecheck]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.miniapp == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Prisma Client (API)
        run: cd apps/api && pnpm prisma generate
      - name: Run Pact contract tests
        run: pnpm -w test:contracts || pnpm -w contracts:verify

  e2e_playwright:
    name: E2E Playwright (MiniApp)
    needs: [changes, build_typecheck]
    if: needs.changes.outputs.miniapp == 'true' || needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Playwright with dependencies
        run: pnpm -C apps/miniapp exec playwright install --with-deps
      - name: Run Playwright E2E tests
        run: pnpm -w test:e2e

  schemathesis_fuzz:
    name: API Schemathesis Fuzz
    needs: [changes, build_typecheck]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.root == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install Python for Schemathesis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Schemathesis
        run: pip install schemathesis
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Prisma Client (API)
        run: cd apps/api && pnpm prisma generate
      - name: Build API
        run: pnpm -C apps/api build
      - name: Start API in background
        run: |
          DATABASE_URL="postgresql://test:test@localhost:5432/test" \
          API_PUBLIC_ORIGIN="http://localhost:4010" \
          ALLOWED_ORIGINS="*" \
          CSP_REPORT_ONLY="1" \
          TELEGRAM_BOT_TOKEN="test" \
          NODE_ENV=test \
          PORT=4010 \
          pnpm -C apps/api start:prod & echo $! > api.pid
      - name: Wait for API to be ready
        run: |
          for i in {1..30}; do 
            curl -sSf http://127.0.0.1:4010/api/health && break
            sleep 1
          done
      - name: Run Schemathesis fuzzing
        run: |
          schemathesis run http://127.0.0.1:4010/api/openapi.json \
            --url=http://127.0.0.1:4010 \
            --checks=all \
            --hypothesis-deadline=500 \
            --request-timeout=5 \
            --concurrency=4 \
            --headers="Authorization: Bearer test" \
            --headers="Idempotency-Key: ci-$(date +%s)" \
            --stateful=links \
            --validate-schema
      - name: Cleanup API process
        if: always()
        run: kill $(cat api.pid) || true

  security_audit:
    name: Security Audit (pnpm audit --audit-level high)
    needs: changes
    if: |
      needs.changes.outputs.root == 'true' ||
      needs.changes.outputs.api == 'true' ||
      needs.changes.outputs.miniapp == 'true' ||
      needs.changes.outputs.bot == 'true' ||
      needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run security audit
        run: pnpm audit --audit-level high

  gitleaks:
    name: gitleaks secret scanning
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          args: "--verbose"