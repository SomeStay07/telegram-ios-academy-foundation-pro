/**
 * üé£ User API Hooks - React Query –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 * 
 * –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π.
 */

import React from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { userApiService, type UserProfile, type UserStats, type UserActivity } from '../services/user'
import { getTelegramApi } from '../../telegram/api'

// Query Keys –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
export const USER_QUERY_KEYS = {
  profile: () => ['user', 'profile'] as const,
  stats: () => ['user', 'stats'] as const,
  activity: (limit?: number, offset?: number) => ['user', 'activity', { limit, offset }] as const,
  notifications: (limit?: number) => ['user', 'notifications', { limit }] as const,
} as const

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useUserProfile() {
  const telegramApi = getTelegramApi()
  const telegramUser = telegramApi.getUser()

  return useQuery({
    queryKey: USER_QUERY_KEYS.profile(),
    queryFn: () => userApiService.getProfile(),
    enabled: telegramUser.isAvailable, // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ Telegram –¥–æ—Å—Ç—É–ø–µ–Ω
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    gcTime: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç –≤ –∫—ç—à–µ
    retry: (failureCount, error: any) => {
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ 401/403 –æ—à–∏–±–∫–∞—Ö
      if (error?.statusCode === 401 || error?.statusCode === 403) {
        return false
      }
      return failureCount < 3
    }
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useUserStats() {
  const { data: profile } = useUserProfile()

  return useQuery({
    queryKey: USER_QUERY_KEYS.stats(),
    queryFn: () => userApiService.getStats(),
    enabled: !!profile, // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –≤ –∫—ç—à–µ
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useUserActivity(limit: number = 20, offset: number = 0) {
  const { data: profile } = useUserProfile()

  return useQuery({
    queryKey: USER_QUERY_KEYS.activity(limit, offset),
    queryFn: () => userApiService.getActivity(limit, offset),
    enabled: !!profile,
    staleTime: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –≤ –∫—ç—à–µ
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useUserNotifications(limit: number = 10) {
  const { data: profile } = useUserProfile()

  return useQuery({
    queryKey: USER_QUERY_KEYS.notifications(limit),
    queryFn: () => userApiService.getNotifications(limit),
    enabled: !!profile,
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
    gcTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã –≤ –∫—ç—à–µ
    refetchInterval: 60 * 1000, // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  })
}

/**
 * –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
 */
export function useUpdateProfile() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (updates: Partial<UserProfile>) => userApiService.updateProfile(updates),
    onMutate: async (updates) => {
      // Optimistic update
      await queryClient.cancelQueries({ queryKey: USER_QUERY_KEYS.profile() })
      
      const previousProfile = queryClient.getQueryData(USER_QUERY_KEYS.profile())
      
      queryClient.setQueryData(USER_QUERY_KEYS.profile(), (old: UserProfile | undefined) => 
        old ? { ...old, ...updates } : old
      )

      return { previousProfile }
    },
    onError: (err, variables, context) => {
      // Rollback –Ω–∞ –æ—à–∏–±–∫–µ
      if (context?.previousProfile) {
        queryClient.setQueryData(USER_QUERY_KEYS.profile(), context.previousProfile)
      }
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: USER_QUERY_KEYS.stats() })
    },
  })
}

/**
 * –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram
 */
export function useSyncTelegramData() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (forceUpdate?: boolean) => userApiService.syncTelegramData({ forceUpdate }),
    onSuccess: (data) => {
      // –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
      queryClient.setQueryData(USER_QUERY_KEYS.profile(), data)
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: USER_QUERY_KEYS.stats() })
      queryClient.invalidateQueries({ queryKey: USER_QUERY_KEYS.activity() })
    },
  })
}

/**
 * –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function useUpdatePreferences() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (preferences: Partial<UserProfile['preferences']>) => 
      userApiService.updatePreferences(preferences),
    onMutate: async (preferences) => {
      await queryClient.cancelQueries({ queryKey: USER_QUERY_KEYS.profile() })
      
      const previousProfile = queryClient.getQueryData(USER_QUERY_KEYS.profile())
      
      queryClient.setQueryData(USER_QUERY_KEYS.profile(), (old: UserProfile | undefined) => 
        old ? { 
          ...old, 
          preferences: { ...old.preferences, ...preferences }
        } : old
      )

      return { previousProfile }
    },
    onError: (err, variables, context) => {
      if (context?.previousProfile) {
        queryClient.setQueryData(USER_QUERY_KEYS.profile(), context.previousProfile)
      }
    },
  })
}

/**
 * –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
 */
export function useMarkNotificationRead() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (notificationId: string) => userApiService.markNotificationRead(notificationId),
    onSuccess: () => {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      queryClient.invalidateQueries({ queryKey: ['user', 'notifications'] })
    },
  })
}

/**
 * –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
 */
export function useMarkAllNotificationsRead() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: () => userApiService.markAllNotificationsRead(),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['user', 'notifications'] })
    },
  })
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
 */
export function useInitializeUser() {
  const queryClient = useQueryClient()
  const telegramApi = getTelegramApi()

  return useMutation({
    mutationFn: () => userApiService.createOrUpdateProfile(),
    onSuccess: (profile) => {
      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
      queryClient.setQueryData(USER_QUERY_KEYS.profile(), profile)
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      queryClient.prefetchQuery({
        queryKey: USER_QUERY_KEYS.stats(),
        queryFn: () => userApiService.getStats(),
        staleTime: 5 * 60 * 1000,
      })
    },
  })
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useUserInitialization() {
  const profile = useUserProfile()
  const initializeUser = useInitializeUser()
  const telegramApi = getTelegramApi()
  const telegramUser = telegramApi.getUser()

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ Telegram –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  React.useEffect(() => {
    if (telegramUser.isAvailable && !profile.data && !profile.isLoading && !initializeUser.isPending) {
      initializeUser.mutate()
    }
  }, [telegramUser.isAvailable, profile.data, profile.isLoading, initializeUser])

  return {
    profile: profile.data,
    isLoading: profile.isLoading || initializeUser.isPending,
    error: profile.error || initializeUser.error,
    isInitializing: initializeUser.isPending,
    isReady: !!profile.data && !profile.isLoading,
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { UserProfile, UserStats, UserActivity }