/**
 * üöÄ Telegram WebApp API Client
 * 
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API
 * –ë–µ–∑ fallback'–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –∏–ª–∏ –º–æ–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

import type { 
  TelegramWebApp, 
  TelegramEnvironmentInfo, 
  TelegramEnvironment,
  TelegramMockConfig,
  TelegramUser,
  TelegramThemeParams
} from './types'

// === ENVIRONMENT DETECTION ===

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export function detectTelegramEnvironment(): TelegramEnvironmentInfo {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
  const webApp = window.Telegram?.WebApp
  
  if (webApp && typeof webApp.ready === 'function') {
    return {
      environment: 'telegram',
      isWebAppAvailable: true,
      version: webApp.version,
      platform: webApp.platform
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (import.meta.env.DEV || process.env.NODE_ENV === 'development') {
    return {
      environment: 'development',
      isWebAppAvailable: false
    }
  }
  
  // –ë—Ä–∞—É–∑–µ—Ä –±–µ–∑ Telegram
  return {
    environment: 'browser',
    isWebAppAvailable: false
  }
}

// === MOCK CONFIGURATION ===

// Development-only mock configuration
const DEFAULT_MOCK_CONFIG: TelegramMockConfig = import.meta.env.DEV ? {
  enabled: import.meta.env.VITE_USE_MOCKS === 'true',  // Only enable when explicitly set in dev
  user: {
    id: 987654321,
    first_name: 'iOS',
    last_name: 'Developer',
    username: 'ios_developer',
    language_code: 'ru',
    is_premium: false,
    allows_write_to_pm: true
  },
  colorScheme: 'dark',
  themeParams: {
    bg_color: '#000000',
    text_color: '#ffffff',
    hint_color: '#999999',
    link_color: '#6ab7ff',
    button_color: '#5288c1',
    button_text_color: '#ffffff',
    secondary_bg_color: '#131313',
    header_bg_color: '#17212b',
    accent_text_color: '#6ab7ff',
    section_bg_color: '#1f1f1f',
    section_header_text_color: '#6ab7ff',
    destructive_text_color: '#ff3b30'
  }
} : {
  enabled: false,
  user: undefined,
  colorScheme: 'dark',
  themeParams: {}
}

let mockConfig: TelegramMockConfig = { ...DEFAULT_MOCK_CONFIG }

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –º–æ–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
export function configureMocks(config: Partial<TelegramMockConfig>): void {
  mockConfig = { ...mockConfig, ...config }
}

// === CORE API CLIENT ===

export class TelegramApiClient {
  private webApp: TelegramWebApp | null = null
  private environment: TelegramEnvironmentInfo
  
  constructor() {
    this.environment = detectTelegramEnvironment()
    
    if (this.environment.isWebAppAvailable) {
      this.webApp = window.Telegram!.WebApp
      this.initializeWebApp()
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WebApp –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
   */
  private initializeWebApp(): void {
    if (!this.webApp) return
    
    // –°–æ–æ–±—â–∞–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    this.webApp.ready()
    
    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    this.webApp.expand()
  }
  
  // === GETTERS ===
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
   */
  getEnvironment(): TelegramEnvironmentInfo {
    return this.environment
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
   */
  isAvailable(): boolean {
    return this.environment.isWebAppAvailable
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä WebApp (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API)
   */
  getWebApp(): TelegramWebApp | null {
    return this.webApp
  }
  
  // === USER API ===
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @throws {Error} –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏ –º–æ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
   */
  getUser(): TelegramUser {
    // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    if (this.webApp?.initDataUnsafe.user) {
      return this.webApp.initDataUnsafe.user
    }
    
    // –ú–æ–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (mockConfig.enabled && mockConfig.user) {
      return {
        id: mockConfig.user.id!,
        first_name: mockConfig.user.first_name!,
        last_name: mockConfig.user.last_name,
        username: mockConfig.user.username,
        language_code: mockConfig.user.language_code,
        is_premium: mockConfig.user.is_premium,
        allows_write_to_pm: mockConfig.user.allows_write_to_pm
      }
    }
    
    throw new Error('Telegram user data is not available')
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  hasUser(): boolean {
    return !!(this.webApp?.initDataUnsafe.user || (mockConfig.enabled && mockConfig.user))
  }
  
  // === THEME API ===
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
   */
  getColorScheme(): 'light' | 'dark' {
    if (this.webApp) {
      return this.webApp.colorScheme
    }
    
    return mockConfig.colorScheme || 'dark'
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   */
  getThemeParams(): TelegramThemeParams {
    if (this.webApp) {
      return this.webApp.themeParams
    }
    
    return mockConfig.themeParams || {}
  }
  
  // === HAPTIC FEEDBACK ===
  
  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
   */
  hapticSelectionChanged(): void {
    if (!this.webApp?.HapticFeedback) return
    
    try {
      this.webApp.HapticFeedback.selectionChanged()
    } catch (error) {
      // Haptic feedback not available
    }
  }
  
  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
   */
  hapticNotification(type: 'error' | 'success' | 'warning'): void {
    if (!this.webApp?.HapticFeedback) return
    
    try {
      this.webApp.HapticFeedback.notificationOccurred(type)
    } catch (error) {
      // Haptic notification not available
    }
  }
  
  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–∏
   */
  hapticImpact(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void {
    if (!this.webApp?.HapticFeedback) return
    
    try {
      this.webApp.HapticFeedback.impactOccurred(style)
    } catch (error) {
      // Haptic impact not available
    }
  }
  
  // === NAVIGATION ===
  
  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç WebApp
   */
  close(): void {
    if (!this.webApp) return
    
    try {
      this.webApp.close()
    } catch (error) {
      // WebApp close not available
    }
  }
  
  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É
   */
  openLink(url: string, options?: { try_instant_view?: boolean }): void {
    if (this.webApp) {
      try {
        this.webApp.openLink(url, options)
        return
      } catch (error) {
        // WebApp openLink not available
      }
    }
    
    // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (mockConfig.enabled) {
      window.open(url, '_blank')
    }
  }
  
  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Telegram —Å—Å—ã–ª–∫—É
   */
  openTelegramLink(url: string): void {
    if (!this.webApp) return
    
    try {
      this.webApp.openTelegramLink(url)
    } catch (error) {
      // WebApp openTelegramLink not available
    }
  }
  
  // === UI CONTROLS ===
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
   */
  showMainButton(text: string, onClick: () => void): void {
    if (!this.webApp?.MainButton) return
    
    try {
      this.webApp.MainButton.setText(text)
      this.webApp.MainButton.onClick(onClick)
      this.webApp.MainButton.show()
    } catch (error) {
      // Main button not available
    }
  }
  
  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
   */
  hideMainButton(): void {
    if (!this.webApp?.MainButton) return
    
    try {
      this.webApp.MainButton.hide()
    } catch (error) {
      // Main button not available
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
   */
  showBackButton(onClick: () => void): void {
    if (!this.webApp?.BackButton) return
    
    try {
      this.webApp.BackButton.onClick(onClick)
      this.webApp.BackButton.show()
    } catch (error) {
      // Back button not available
    }
  }
  
  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
   */
  hideBackButton(): void {
    if (!this.webApp?.BackButton) return
    
    try {
      this.webApp.BackButton.hide()
    } catch (error) {
      // Back button not available
    }
  }
  
  // === POPUPS ===
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
   */
  showPopup(
    message: string, 
    title?: string, 
    buttons?: Array<{ id?: string; type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive'; text?: string }>
  ): Promise<string | null> {
    if (!this.webApp) {
      return Promise.resolve(null)
    }
    
    return new Promise((resolve) => {
      try {
        this.webApp!.showPopup({
          title,
          message,
          buttons
        }, (buttonId) => {
          resolve(buttonId)
        })
      } catch (error) {
        // Popup not available
        resolve(null)
      }
    })
  }
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  showAlert(message: string): Promise<void> {
    if (!this.webApp) {
      return Promise.resolve()
    }
    
    return new Promise((resolve) => {
      try {
        this.webApp!.showAlert(message, () => {
          resolve()
        })
      } catch (error) {
        // Alert not available
        resolve()
      }
    })
  }
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
   */
  showConfirm(message: string): Promise<boolean> {
    if (!this.webApp) {
      return Promise.resolve(false)
    }
    
    return new Promise((resolve) => {
      try {
        this.webApp!.showConfirm(message, (confirmed) => {
          resolve(confirmed)
        })
      } catch (error) {
        // Confirm not available
        resolve(false)
      }
    })
  }
}

// === SINGLETON INSTANCE ===

let apiClient: TelegramApiClient | null = null

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
 */
export function getTelegramApi(): TelegramApiClient {
  if (!apiClient) {
    apiClient = new TelegramApiClient()
  }
  return apiClient
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export function resetTelegramApi(): void {
  apiClient = null
}