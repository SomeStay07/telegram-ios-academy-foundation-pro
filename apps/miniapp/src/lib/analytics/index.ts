// –ú–∏–Ω–∏-—Å–ª–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é no-op, lazy –∑–∞–≥—Ä—É–∑–∫–∞ PostHog —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ

type AnalyticsEvent = string
type AnalyticsProps = Record<string, any>

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–∫–µ—Ä–∞
interface AnalyticsTracker {
  track(event: AnalyticsEvent, props?: AnalyticsProps): void
  identify(userId: string, traits?: Record<string, any>): void
  init(): Promise<void>
}

// Proxy —Ç—Ä–µ–∫–µ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
class ProxyTracker implements AnalyticsTracker {
  track(event: AnalyticsEvent, props?: AnalyticsProps): void {
    if (typeof navigator !== 'undefined' && 'sendBeacon' in navigator) {
      const payload = JSON.stringify({ event, props, ts: Date.now() })
      navigator.sendBeacon('/api/events', payload)
    } else {
      // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ sendBeacon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      fetch('/api/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ event, props, ts: Date.now() })
      }).catch(console.error)
    }
  }
  
  identify(userId: string, traits?: Record<string, any>): void {
    this.track('$identify', { userId, ...traits })
  }
  
  async init(): Promise<void> {
    // No initialization needed for proxy mode
  }
}

// No-op —Ç—Ä–µ–∫–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
class NoOpTracker implements AnalyticsTracker {
  track(event: AnalyticsEvent, props?: AnalyticsProps): void {
    if (import.meta.env.DEV) {
      console.log(`üìä Analytics (disabled): ${event}`, props)
    }
  }
  
  identify(userId: string, traits?: Record<string, any>): void {
    if (import.meta.env.DEV) {
      console.log(`üë§ Analytics (disabled): identify`, { userId, traits })
    }
  }
  
  async init(): Promise<void> {
    // No-op
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä (–Ω–∞—á–∏–Ω–∞–µ–º —Å no-op)
let tracker: AnalyticsTracker = new NoOpTracker()

// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
export function track(event: AnalyticsEvent, props?: AnalyticsProps): void {
  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  if (!isInitialized && shouldEnableAnalytics()) {
    initializeAnalytics().catch(console.error)
  }
  
  tracker.track(event, props)
}

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function identify(userId: string, traits?: Record<string, any>): void {
  if (!isInitialized && shouldEnableAnalytics()) {
    initializeAnalytics().catch(console.error)
  }
  
  tracker.identify(userId, traits)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
function shouldEnableAnalytics(): boolean {
  return import.meta.env.VITE_ENABLE_ANALYTICS === '1'
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
function shouldUseProxy(): boolean {
  return import.meta.env.VITE_ANALYTICS_PROXY === '1'
}

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function initializeAnalytics(): Promise<void> {
  if (isInitialized) return
  
  try {
    if (shouldUseProxy()) {
      // –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
      tracker = new ProxyTracker()
      await tracker.init()
      isInitialized = true
      
      if (import.meta.env.DEV) {
        console.log('üìä Analytics initialized (Proxy mode)')
      }
    } else if (import.meta.env.PROD && import.meta.env.VITE_POSTHOG_API_KEY) {
      // –ü—Ä—è–º–æ–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ PostHog SDK
      const { PostHogTracker } = await import(/* @vite-ignore */ './posthog')
      const posthogTracker = new PostHogTracker()
      await posthogTracker.init()
      
      // –ü–æ–¥–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫–µ—Ä
      tracker = posthogTracker
      isInitialized = true
      
      if (import.meta.env.DEV) {
        console.log('üìä Analytics initialized (PostHog SDK)')
      }
    }
  } catch (error) {
    console.error('Failed to initialize analytics:', error)
    // –û—Å—Ç–∞–µ–º—Å—è —Å no-op —Ç—Ä–µ–∫–µ—Ä–æ–º
  }
}

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
export const analytics = {
  // Lesson events
  lessonStarted: (props: { lessonId: string; title: string }) => 
    track('lesson_started', props),
  
  lessonCompleted: (props: { lessonId: string; score: number; duration: number }) => 
    track('lesson_completed', props),
  
  // Quiz events  
  quizAnswered: (props: { lessonId: string; questionId: string; correct: boolean; timeSpent: number }) =>
    track('quiz_answered', props),
  
  // Interview events
  interviewStarted: (props: { interviewId: string; mode: 'drill' | 'explain' | 'mock' }) =>
    track('interview_started', props),
    
  interviewCompleted: (props: { interviewId: string; questionsCount: number; duration: number }) =>
    track('interview_completed', props),
    
  // Performance events
  pageLoad: (props: { route: string; loadTime: number }) =>
    track('page_load', props),
    
  // Error events
  error: (props: { error: string; context?: string }) =>
    track('error', props)
}