import React, { useMemo } from 'react'
import { motion } from 'framer-motion'
import { useHaptics } from '../lib/haptics'

interface StreakDay {
  date: Date
  completed: boolean
  isToday: boolean
  isFuture: boolean
}

interface EnhancedStreakProps {
  currentStreak: number
  maxStreak?: number
  className?: string
}

export const EnhancedStreak: React.FC<EnhancedStreakProps> = ({ 
  currentStreak, 
  maxStreak = 30,
  className = '' 
}) => {
  const haptics = useHaptics()

  // Generate last 7 days data
  const streakData = useMemo(() => {
    const today = new Date()
    const days: StreakDay[] = []
    
    for (let i = 6; i >= 0; i--) {
      const date = new Date(today)
      date.setDate(today.getDate() - i)
      
      const isToday = i === 0
      const isFuture = i < 0
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–Ω–µ–π
      let completed = false
      if (i === 6) completed = true  // –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –¥–µ–Ω—å - –∑–∞–≤–µ—Ä—à–µ–Ω
      if (i === 5) completed = true  // –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π - –∑–∞–≤–µ—Ä—à–µ–Ω  
      if (i === 4) completed = false // –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å
      if (i === 3) completed = true  // –ó–∞–≤–µ—Ä—à–µ–Ω
      if (i === 2) completed = true  // –ó–∞–≤–µ—Ä—à–µ–Ω (–≤—á–µ—Ä–∞)
      if (i === 1) completed = false // –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω
      if (i === 0) completed = false // –°–µ–≥–æ–¥–Ω—è - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      
      days.push({
        date,
        completed,
        isToday,
        isFuture
      })
    }
    
    return days
  }, [currentStreak])

  const streakPercentage = Math.min((currentStreak / maxStreak) * 100, 100)
  
  const getStreakMessage = () => {
    if (currentStreak === 0) return "–ù–∞—á–Ω–∏—Ç–µ —Å–µ—Ä–∏—é —Å–µ–≥–æ–¥–Ω—è!"
    if (currentStreak < 3) return "–ù–∞–±–∏—Ä–∞–µ—Ç–µ –æ–±–æ—Ä–æ—Ç—ã!"
    if (currentStreak < 7) return "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!"
    if (currentStreak < 14) return "–í—ã –≤ –æ–≥–Ω–µ!"
    if (currentStreak < 30) return "–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–π!"
    return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å!"
  }

  const getRussianDayName = (date: Date) => {
    const days = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']
    return days[date.getDay()]
  }

  const getRussianDayShort = (date: Date) => {
    const days = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±']
    return days[date.getDay()]
  }

  const getDateNumber = (date: Date) => {
    return date.getDate()
  }

  return (
    <motion.section
      className={`enhanced-streak-container ${className}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      aria-labelledby="streak-title"
      role="region"
    >
      {/* Header */}
      <motion.header 
        className="streak-header"
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: 0.2 }}
      >
        <div className="flex items-center gap-3">
          <motion.div
            className="streak-icon"
            animate={{ 
              scale: [1, 1.1, 1],
              rotate: [0, 5, -5, 0]
            }}
            transition={{ 
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
            aria-hidden="true"
          >
            ‚ö°
          </motion.div>
          <div>
            <h2 id="streak-title" className="streak-title">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –°–µ—Ä–∏—è</h2>
            <p className="streak-subtitle">{getStreakMessage()}</p>
          </div>
        </div>
        
        <motion.button 
          className="streak-counter"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onTap={() => {
            haptics.impact('medium')
            // Streak interaction tracked for user engagement
          }}
          aria-label={`–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${currentStreak} –¥–Ω–µ–π. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π`}
          tabIndex={0}
        >
          <span className="streak-number" aria-hidden="true">{currentStreak}</span>
          <span className="streak-days-label">–¥–Ω–µ–π</span>
        </motion.button>
      </motion.header>

      {/* 7-Day Calendar Visual */}
      <motion.div 
        className="streak-calendar"
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.4, duration: 0.5 }}
        role="grid"
        aria-label="7-day streak calendar"
      >
        <div className="calendar-grid" role="row">
          {streakData.map((day, index) => (
            <motion.button
              key={day.date.toISOString()}
              className={`calendar-day ${day.completed ? 'completed' : ''} ${day.isToday ? 'today' : ''} ${day.isFuture ? 'future' : ''}`}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ 
                delay: 0.1 * index + 0.5,
                type: "spring",
                stiffness: 300
              }}
              whileHover={{ 
                scale: 1.1,
                y: -2
              }}
              whileTap={{ scale: 0.9 }}
              onTap={() => {
                haptics.selection()
                // Day interaction tracked for calendar engagement
              }}
              role="gridcell"
              aria-label={`${getRussianDayName(day.date)}, ${getDateNumber(day.date)} —á–∏—Å–ª–æ${day.completed ? ', –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : ''}${day.isToday ? ', —Å–µ–≥–æ–¥–Ω—è' : ''}`}
              aria-pressed={day.completed}
              disabled={day.isFuture}
              tabIndex={day.isFuture ? -1 : 0}
            >
              {/* Day info display */}
              <div className="day-info">
                <span className="day-name">{getRussianDayShort(day.date)}</span>
                <span className="day-number">{getDateNumber(day.date)}</span>
              </div>

              
              {/* Today indicator */}
              {day.isToday && (
                <motion.div
                  className="today-pulse"
                  animate={{ 
                    scale: [1, 1.2, 1],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{ 
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  aria-hidden="true"
                />
              )}
            </motion.button>
          ))}
        </div>
      </motion.div>

      {/* Progress Bar */}
      <motion.div 
        className="streak-progress"
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        role="progressbar"
        aria-valuenow={currentStreak}
        aria-valuemin={0}
        aria-valuemax={maxStreak}
        aria-label={`Streak progress: ${currentStreak} of ${maxStreak} days`}
      >
        <div className="progress-info">
          <span className="progress-label">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {maxStreak} –¥–Ω–µ–π</span>
          <span className="progress-percentage" aria-live="polite">{Math.round(streakPercentage)}%</span>
        </div>
        
        <div className="progress-bar-container">
          <motion.div
            className="progress-bar-fill"
            initial={{ width: 0 }}
            animate={{ width: `${streakPercentage}%` }}
            transition={{ 
              delay: 1,
              duration: 1.5,
              ease: "easeOut"
            }}
            aria-hidden="true"
          />
          <motion.div
            className="progress-bar-glow"
            initial={{ width: 0 }}
            animate={{ width: `${streakPercentage}%` }}
            transition={{ 
              delay: 1.2,
              duration: 1.5,
              ease: "easeOut"
            }}
            aria-hidden="true"
          />
        </div>
      </motion.div>

      {/* Milestone badges */}
      {currentStreak >= 7 && (
        <motion.div
          className="streak-badges"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1.5, type: "spring" }}
          role="list"
          aria-label="Streak milestone achievements"
        >
          <div className="badge-container">
            {currentStreak >= 7 && (
              <motion.button 
                className="streak-badge week-badge"
                whileHover={{ scale: 1.1, rotate: 5 }}
                role="listitem"
                aria-label="–ß–µ–º–ø–∏–æ–Ω –Ω–µ–¥–µ–ª–∏: —Å–µ—Ä–∏—è 7+ –¥–Ω–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
                tabIndex={0}
              >
                üèÉ –ß–µ–º–ø–∏–æ–Ω –ù–µ–¥–µ–ª–∏
              </motion.button>
            )}
            {currentStreak >= 14 && (
              <motion.button 
                className="streak-badge biweek-badge"
                whileHover={{ scale: 1.1, rotate: -5 }}
                role="listitem"
                aria-label="–í–æ–∏–Ω –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å: —Å–µ—Ä–∏—è 14+ –¥–Ω–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
                tabIndex={0}
              >
                üèÜ –í–æ–∏–Ω –î–≤—É—Ö –ù–µ–¥–µ–ª—å
              </motion.button>
            )}
            {currentStreak >= 30 && (
              <motion.button 
                className="streak-badge month-badge"
                whileHover={{ scale: 1.1, rotate: 5 }}
                role="listitem"
                aria-label="–ú–∞—Å—Ç–µ—Ä –º–µ—Å—è—Ü–∞: —Å–µ—Ä–∏—è 30+ –¥–Ω–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
                tabIndex={0}
              >
                üëë –ú–∞—Å—Ç–µ—Ä –ú–µ—Å—è—Ü–∞
              </motion.button>
            )}
          </div>
        </motion.div>
      )}
    </motion.section>
  )
}