import React from 'react'
import { type LevelBadgeVariant, type LevelFormatOptions, type LevelThreshold } from './LevelBadgeTypes'

/**
 * üéØ LevelBadge Logic & Utilities
 * 
 * –ú–æ–¥—É–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É—Ç–∏–ª–∏—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É—Ä–æ–≤–Ω—è
 * –†–∞–∑–¥–µ–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ LevelBadge.tsx –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
 */

/**
 * üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ —É—Ä–æ–≤–Ω–µ–π
 */

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export const getLevelVariant = (level: number, maxLevel: number = 100): LevelBadgeVariant => {
  const percentage = (level / maxLevel) * 100
  
  if (percentage >= 95) return 'legendary'
  if (percentage >= 85) return 'diamond'
  if (percentage >= 75) return 'platinum'
  if (percentage >= 60) return 'gold'
  if (percentage >= 40) return 'success'
  if (percentage >= 20) return 'primary'
  return 'default'
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —É—Ä–æ–≤–Ω—è —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏
 */
export const formatLevel = (
  level: number, 
  options: LevelFormatOptions = {}
): string => {
  const {
    useAbbreviation = true,
    decimalPlaces = 1,
    abbreviationThreshold = 1000
  } = options

  if (!useAbbreviation || level < abbreviationThreshold) {
    return level.toString()
  }

  if (level >= 1000000) {
    return `${(level / 1000000).toFixed(decimalPlaces)}M`
  }
  
  if (level >= 1000) {
    return `${(level / 1000).toFixed(decimalPlaces)}K`
  }
  
  return level.toString()
}

/**
 * üéØ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
export const levelThresholds: LevelThreshold[] = [
  { minPercentage: 95, variant: 'legendary', name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' },
  { minPercentage: 85, variant: 'diamond', name: '–ê–ª–º–∞–∑–Ω—ã–π' },
  { minPercentage: 75, variant: 'platinum', name: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π' },
  { minPercentage: 60, variant: 'gold', name: '–ó–æ–ª–æ—Ç–æ–π' },
  { minPercentage: 40, variant: 'success', name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' },
  { minPercentage: 20, variant: 'primary', name: '–û–ø—ã—Ç–Ω—ã–π' },
  { minPercentage: 0, variant: 'default', name: '–ù–æ–≤–∏—á–æ–∫' }
]

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export const getLevelName = (level: number, maxLevel: number = 100): string => {
  const percentage = (level / maxLevel) * 100
  
  const threshold = levelThresholds.find(t => percentage >= t.minPercentage)
  return threshold?.name || '–ù–æ–≤–∏—á–æ–∫'
}

/**
 * üé® –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
 */
export const shouldGlow = (variant: LevelBadgeVariant): boolean => {
  return variant === 'legendary' || variant === 'diamond'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
 */
export const shouldShowParticles = (variant: LevelBadgeVariant): boolean => {
  return variant === 'legendary'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è
 */
export const shouldShimmer = (variant: LevelBadgeVariant): boolean => {
  return variant === 'legendary' || variant === 'diamond'
}

/**
 * üìè –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–µ–π–±–ª LVL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞
 */
export const shouldShowLabel = (size: string, showLabel: boolean): boolean => {
  return showLabel && (size === 'lg' || size === 'xl')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —á–∏—Å–ª–∞
 */
export const getTextSizeClasses = (displayLevel: string): string[] => {
  const classes: string[] = []
  
  if (displayLevel.length > 3) {
    classes.push("text-xs")
  } else if (displayLevel.length > 2) {
    classes.push("text-sm")
  }
  
  return classes
}

/**
 * üîß –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ accessibility –∞—Ç—Ä–∏–±—É—Ç—ã
 */
export const getA11yProps = (interactive: boolean, level: number, maxLevel?: number) => {
  if (!interactive) {
    return {
      title: `–£—Ä–æ–≤–µ–Ω—å ${level}${maxLevel ? ` –∏–∑ ${maxLevel}` : ''}`
    }
  }

  return {
    role: "button" as const,
    tabIndex: 0,
    title: `–£—Ä–æ–≤–µ–Ω—å ${level}${maxLevel ? ` –∏–∑ ${maxLevel}` : ''}`
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–µ–π–¥–∂–µ–π
 */
export const createKeyboardHandler = (onClick?: () => void) => {
  if (!onClick) return undefined

  return (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      onClick()
    }
  }
}

/**
 * üìä –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–ø—ã—Ç–∞
 */

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export const calculateProgressPercentage = (
  currentExp: number,
  levelExp: number,
  nextLevelExp: number
): number => {
  const expInCurrentLevel = currentExp - levelExp
  const expNeededForNextLevel = nextLevelExp - levelExp
  
  return Math.min(100, Math.max(0, (expInCurrentLevel / expNeededForNextLevel) * 100))
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export const getExpToNextLevel = (
  currentExp: number,
  nextLevelExp: number
): number => {
  return Math.max(0, nextLevelExp - currentExp)
}

/**
 * üé™ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç–∏—Ü
 */
export const generateParticlePositions = (count: number = 3) => {
  return Array.from({ length: count }, (_, index) => ({
    top: Math.random() * 80 + 10, // 10-90%
    left: Math.random() * 80 + 10, // 10-90%
    delay: index * 200 + Math.random() * 100
  }))
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–Ω–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
export const getTextShadowStyle = (variant: LevelBadgeVariant): React.CSSProperties => {
  const shadows = {
    default: '0 1px 2px rgba(0, 0, 0, 0.5)',
    primary: '0 1px 2px rgba(99, 102, 241, 0.5)',
    success: '0 1px 2px rgba(16, 185, 129, 0.5)',
    warning: '0 1px 2px rgba(245, 158, 11, 0.5)',
    danger: '0 1px 2px rgba(239, 68, 68, 0.5)',
    gold: '0 1px 2px rgba(0, 0, 0, 0.3)',
    platinum: '0 1px 2px rgba(0, 0, 0, 0.3)',
    diamond: '0 1px 2px rgba(139, 92, 246, 0.5)',
    legendary: '0 1px 2px rgba(168, 85, 247, 0.6)'
  }

  return {
    textShadow: shadows[variant || 'default']
  }
}

/**
 * üîÑ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è
 */

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
 */
export const useAnimationState = (level: number, animated: boolean) => {
  const [isAnimating, setIsAnimating] = React.useState(false)
  
  React.useEffect(() => {
    if (animated) {
      setIsAnimating(true)
      const timer = setTimeout(() => setIsAnimating(false), 600)
      return () => clearTimeout(timer)
    }
  }, [level, animated])
  
  return isAnimating
}

/**
 * üéØ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export const LEVEL_CONFIG = {
  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
  ANIMATION_DURATION: 600,
  SHIMMER_DURATION: 3000,
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  THOUSAND_THRESHOLD: 1000,
  MILLION_THRESHOLD: 1000000,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–∏—Ü
  PARTICLE_COUNT: 3,
  PARTICLE_ANIMATION_DELAY: 200,
  
  // –†–∞–∑–º–µ—Ä—ã
  MIN_SIZE_FOR_LABEL: ['lg', 'xl']
} as const