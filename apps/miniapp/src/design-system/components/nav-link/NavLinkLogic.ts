/**
 * üîß Utility Functions for NavLink
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 */
export const isCurrentPage = (href: string): boolean => {
  if (typeof window === 'undefined') return false
  return window.location.hash === href || window.location.pathname === href
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 */
export const handleSmoothScroll = (
  href: string, 
  external: boolean,
  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void
) => {
  return (e: React.MouseEvent<HTMLAnchorElement>) => {
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if (href.startsWith('#') && !external) {
      e.preventDefault()
      const target = document.querySelector(href)
      if (target) {
        target.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        })
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        window.history.pushState(null, '', href)
      }
    }

    onClick?.(e)
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
export const getEffectiveVariant = (
  isActive: boolean, 
  variant: string = 'default'
): string => {
  return isActive ? 'active' : variant
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
 */
export const hasIcon = (
  withIcon?: boolean, 
  icon?: React.ReactNode
): boolean => {
  return withIcon ?? !!icon
}