import React from 'react'
import { cn } from '../../../lib/utils'
import { NavLinkProps } from './NavLinkTypes'
import { navLinkVariants } from './NavLinkVariants'
import { 
  isCurrentPage, 
  handleSmoothScroll, 
  getEffectiveVariant, 
  hasIcon 
} from './NavLinkLogic'

/**
 * üé® Enhanced NavLink Component
 * 
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π accessibility,
 * —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å—Ç–∏–ª–µ–π.
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö enterprise-–¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º.
 * 
 * @example
 * // –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 * <NavLink href="#overview">–û–±–∑–æ—Ä</NavLink>
 * 
 * // –° –∏–∫–æ–Ω–∫–æ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 * <NavLink 
 *   href="/dashboard" 
 *   icon={<DashboardIcon />}
 *   variant="primary"
 *   isActive
 * >
 *   –î–∞—à–±–æ—Ä–¥
 * </NavLink>
 * 
 * // –ë–æ–∫–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
 * <NavLink 
 *   href="#settings"
 *   variant="sidebar"
 *   size="md"
 *   icon={<SettingsIcon />}
 * >
 *   –ù–∞—Å—Ç—Ä–æ–π–∫–∏
 * </NavLink>
 * 
 * // –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
 * <NavLink 
 *   href="https://example.com"
 *   external
 *   icon={<ExternalIcon />}
 * >
 *   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
 * </NavLink>
 */
export const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(
  ({
    className,
    variant = "default",
    size = "sm", 
    withIcon,
    isActive: propIsActive,
    disabled = false,
    href,
    children,
    icon,
    external = false,
    onClick,
    ...props
  }, ref) => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    const isActive = propIsActive ?? isCurrentPage(href)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const effectiveVariant = getEffectiveVariant(isActive, variant)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
    const hasIconValue = hasIcon(withIcon, icon)

    const handleClick = disabled 
      ? (e: React.MouseEvent<HTMLAnchorElement>) => e.preventDefault()
      : handleSmoothScroll(href, external, onClick)

    return (
      <a
        ref={ref}
        href={href}
        className={cn(
          navLinkVariants({ 
            variant: effectiveVariant, 
            size, 
            withIcon: hasIconValue,
            isActive,
            disabled 
          }),
          className
        )}
        onClick={handleClick}
        target={external ? "_blank" : undefined}
        rel={external ? "noopener noreferrer" : undefined}
        aria-current={isActive ? "page" : undefined}
        aria-disabled={disabled}
        tabIndex={disabled ? -1 : undefined}
        {...props}
      >
        {/* –ò–∫–æ–Ω–∫–∞ */}
        {icon && (
          <span className="flex-shrink-0 w-4 h-4 flex items-center justify-center">
            {icon}
          </span>
        )}
        
        {/* –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ */}
        <span className={cn(
          "flex-1",
          hasIconValue && "truncate"
        )}>
          {children}
        </span>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–∏ */}
        {external && (
          <span className="flex-shrink-0 w-3 h-3 opacity-60">
            <svg viewBox="0 0 12 12" fill="currentColor">
              <path d="M3.5 3C3.22386 3 3 3.22386 3 3.5C3 3.77614 3.22386 4 3.5 4H7.29289L3.14645 8.14645C2.95118 8.34171 2.95118 8.65829 3.14645 8.85355C3.34171 9.04882 3.65829 9.04882 3.85355 8.85355L8 4.70711V8.5C8 8.77614 8.22386 9 8.5 9C8.77614 9 9 8.77614 9 8.5V3.5C9 3.22386 8.77614 3 8.5 3H3.5Z"/>
            </svg>
          </span>
        )}
        
        {/* –ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
        {isActive && !disabled && (
          <span 
            className="absolute left-0 top-1/2 -translate-y-1/2 w-0.5 h-4 bg-indigo-500 rounded-r-full"
            aria-hidden="true"
          />
        )}
      </a>
    )
  }
)

NavLink.displayName = "NavLink"

// Re-export types
export type { NavLinkProps, NavLinkVariant, NavLinkSize } from './NavLinkTypes'