import React from 'react'
import { cn } from '../../../lib/utils'
import type { TooltipProps } from './TooltipTypes'
import { tooltipVariants, arrowVariants } from './TooltipVariants'
import { 
  useTooltipLogic, 
  createTooltipHandlers, 
  createAccessibilityProps 
} from './TooltipLogic'

/**
 * üé® Enhanced Tooltip Component
 * 
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—É–ª—Ç–∏–ø —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π accessibility, –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö enterprise-–¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º.
 * 
 * @example
 * // –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 * <Tooltip content="–ü–æ–¥—Å–∫–∞–∑–∫–∞">
 *   <button>–ù–∞–≤–µ–¥–∏ –Ω–∞ –º–µ–Ω—è</button>
 * </Tooltip>
 * 
 * // –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –ø–æ–∑–∏—Ü–∏–µ–π
 * <Tooltip 
 *   content="–£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è" 
 *   variant="success" 
 *   position="bottom"
 *   showArrow
 * >
 *   <span>‚úÖ –ì–æ—Ç–æ–≤–æ</span>
 * </Tooltip>
 * 
 * // –° –∑–∞–¥–µ—Ä–∂–∫–æ–π
 * <Tooltip 
 *   content="–≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 500–º—Å" 
 *   delay={500}
 * >
 *   <div>–≠–ª–µ–º–µ–Ω—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</div>
 * </Tooltip>
 */
export const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(
  ({
    content,
    children,
    variant = "default",
    size = "md",
    position = "top",
    delay = 200,
    disabled = false,
    showArrow = true,
    richContent = false,
    touchEnabled = true,
    className,
    containerClassName,
    ...props
  }, ref) => {
    const {
      isVisible,
      actualPosition,
      containerRef,
      tooltipRef,
      showTooltip,
      hideTooltip,
      handleTouch,
      getPositionClasses
    } = useTooltipLogic(position, delay, disabled)

    const tooltipHandlers = createTooltipHandlers(
      showTooltip,
      hideTooltip,
      handleTouch,
      touchEnabled
    )

    const accessibilityProps = createAccessibilityProps(isVisible)

    if (disabled) {
      return <>{children}</>
    }

    return (
      <div 
        ref={containerRef}
        className={cn("relative inline-block", containerClassName)}
        {...tooltipHandlers}
        {...props}
      >
        {children}
        
        {/* Tooltip */}
        <div
          ref={tooltipRef}
          className={cn(
            tooltipVariants({ 
              variant, 
              size, 
              position: actualPosition,
              visible: isVisible 
            }),
            getPositionClasses(),
            className
          )}
          {...accessibilityProps}
        >
          {content}
          
          {/* Arrow */}
          {showArrow && (
            <div
              className={cn(
                arrowVariants({ 
                  variant, 
                  position: actualPosition 
                })
              )}
            />
          )}
        </div>
      </div>
    )
  }
)

Tooltip.displayName = "Tooltip"