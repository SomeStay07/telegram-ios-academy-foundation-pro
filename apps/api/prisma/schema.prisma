datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(cuid())
  tgId              String              @unique
  createdAt         DateTime            @default(now())
  Progress          Progress[]
  Attempt           Attempt[]
  InterviewProgress InterviewProgress[]
  InterviewAttempt  InterviewAttempt[]
}

model Lesson {
  id               String         @id
  title            String
  description      String
  content          Json
  estimatedMinutes Int
  difficulty       Difficulty     @default(beginner)
  tags             String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  CourseLesson     CourseLesson[]
  Progress         Progress[]
  Attempt          Attempt[]
}

model Course {
  id             String         @id
  title          String
  description    String
  difficulty     Difficulty     @default(beginner)
  estimatedHours Float
  tags           String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // порядок в курсе задаётся через CourseLesson.order
  CourseLesson   CourseLesson[]
}

model CourseLesson {
  courseId String
  lessonId String
  order    Int

  course Course @relation(fields: [courseId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@id([courseId, lessonId])
  @@index([courseId, order])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  // 0..1 для процента/мастерства
  score     Float    @default(0)
  completed Boolean  @default(false)
  timeSpent Int      @default(0) // in minutes
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Attempt {
  id               String   @id @default(cuid())
  userId           String
  lessonId         String
  score            Float
  payload          Json
  timeSpentSeconds Int
  createdAt        DateTime @default(now())
  // защитим от дублирования по идемпотентному ключу (если решишь хранить в БД)
  idempotencyKey   String?  @unique

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@index([lessonId, userId, createdAt])
}

model InterviewProgress {
  id           String   @id @default(cuid())
  userId       String
  interviewId  String
  lastIndex    Int      @default(0)
  correct      Int      @default(0)
  total        Int      @default(0)
  mode         InterviewMode @default(drill)
  metadata     Json?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, interviewId, mode])
  @@index([userId])
  @@index([interviewId])
}

model InterviewAttempt {
  id             String   @id @default(cuid())
  userId         String
  interviewId    String
  questionId     String
  mode           InterviewMode @default(drill)
  status         InterviewAttemptStatus @default(started)
  correct        Boolean?
  answerJson     Json?
  timeSpent      Int      @default(0) // in seconds
  answeredAt     DateTime @default(now())
  finishedAt     DateTime?
  idempotencyKey String?  @unique

  user User @relation(fields: [userId], references: [id])

  @@index([interviewId, userId, answeredAt])
  @@index([userId, answeredAt])
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum InterviewMode {
  drill
  explain
  mock
}

enum InterviewAttemptStatus {
  started
  completed
  abandoned
}

// Event Sourcing Tables
model EventStore {
  eventId       String   @id @default(uuid()) @map("event_id")
  aggregateId   String   @map("aggregate_id")
  aggregateType String   @map("aggregate_type")
  eventType     String   @map("event_type")
  eventData     Json     @map("event_data")
  eventVersion  Int      @map("event_version")
  createdAt     DateTime @default(now()) @map("created_at")

  @@unique([aggregateId, eventVersion], map: "unique_aggregate_version")
  @@index([aggregateId, eventVersion], map: "idx_event_store_aggregate")
  @@index([aggregateType, eventType], map: "idx_event_store_type")
  @@index([createdAt], map: "idx_event_store_created")
  @@map("event_store")
}

model AggregateSnapshot {
  snapshotId      String   @id @default(uuid()) @map("snapshot_id")
  aggregateId     String   @unique @map("aggregate_id")
  aggregateType   String   @map("aggregate_type")
  aggregateVersion Int     @map("aggregate_version")
  snapshotData    Json     @map("snapshot_data")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([aggregateType], map: "idx_snapshots_type")
  @@map("aggregate_snapshots")
}

// Read Models for Performance
model UserStreaks {
  userId            String    @id @map("user_id")
  currentStreak     Int       @default(0) @map("current_streak")
  longestStreak     Int       @default(0) @map("longest_streak")
  lastActivityDate  DateTime? @map("last_activity_date") @db.Date
  streakStartDate   DateTime? @map("streak_start_date") @db.Date
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([currentStreak], map: "idx_user_streaks_current")
  @@index([longestStreak], map: "idx_user_streaks_longest")
  @@map("user_streaks")
}

model UserActivities {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  activityType String   @map("activity_type")
  activityData Json?    @map("activity_data")
  occurredAt   DateTime @map("occurred_at")

  @@index([userId, occurredAt], map: "idx_user_activities_user")
  @@index([activityType], map: "idx_user_activities_type")
  @@map("user_activities")
}

model AssessmentResults {
  id           String    @id @default(uuid())
  assessmentId String    @map("assessment_id")
  userId       String    @map("user_id")
  score        Int
  percentage   Decimal   @db.Decimal(5,2)
  passed       Boolean
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")

  @@index([userId, completedAt], map: "idx_assessment_results_user")
  @@index([assessmentId], map: "idx_assessment_results_assessment")
  @@map("assessment_results")
}

// Command Idempotency
model CommandIdempotency {
  idempotencyKey String   @id @map("idempotency_key")
  commandType    String   @map("command_type")
  commandData    Json     @map("command_data")
  result         Json?
  processedAt    DateTime @default(now()) @map("processed_at")
  expiresAt      DateTime @map("expires_at")

  @@index([expiresAt], map: "idx_command_idempotency_expires")
  @@map("command_idempotency")
}

// Learning Progress Read Model (for materialized view compatibility)
model LearningProgress {
  userId           String   @map("user_id")
  lessonId         String   @map("lesson_id")
  score            Float
  completed        Boolean  @default(false)
  timeSpentMinutes Float    @default(0) @map("time_spent_minutes")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@id([userId, lessonId], map: "userId_lessonId")
  @@index([userId], map: "idx_learning_progress_user")
  @@index([lessonId], map: "idx_learning_progress_lesson")
  @@map("learning_progress")
}