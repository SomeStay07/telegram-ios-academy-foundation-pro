import type { Meta, StoryObj } from '@storybook/react';
import React from 'react';

const meta: Meta = {
  title: 'üé® New Design System/01 Foundation/Colors',
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: `
# üé® Color System

–ù–∞—à–∞ —Ü–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö Apple HIG —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –¥–ª—è Telegram WebApp –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:

- **Accessibility**: WCAG AA+ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
- **Consistency**: –ï–¥–∏–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
- **Flexibility**: Adaptive themes –∏ dark mode
- **Platform Integration**: Seamless Telegram integration

## Color Tokens

–í—Å–µ —Ü–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ CSS custom properties –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ —Ç–µ–º–µ Telegram.

### Semantic Colors
–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
- **Primary**: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- **Success**: –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è  
- **Warning**: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- **Error**: –û—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- **Info**: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

### Educational Colors
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
- **Swift**: #FF6B35 - –¥–ª—è Swift-related –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- **UIKit**: #007AFF - –¥–ª—è UI/UX –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
- **Architecture**: #5856D6 - –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
- **Testing**: #34C759 - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- **Performance**: #FF3B30 - –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        `,
      },
    },
  },
};

export default meta;
type Story = StoryObj;

const colors = {
  primary: [
    { name: 'Primary 50', value: '#eff6ff', token: '--primary-50' },
    { name: 'Primary 100', value: '#dbeafe', token: '--primary-100' },
    { name: 'Primary 200', value: '#bfdbfe', token: '--primary-200' },
    { name: 'Primary 300', value: '#93c5fd', token: '--primary-300' },
    { name: 'Primary 400', value: '#60a5fa', token: '--primary-400' },
    { name: 'Primary 500', value: '#3b82f6', token: '--primary-500' },
    { name: 'Primary 600', value: '#2563eb', token: '--primary-600' },
    { name: 'Primary 700', value: '#1d4ed8', token: '--primary-700' },
    { name: 'Primary 800', value: '#1e40af', token: '--primary-800' },
    { name: 'Primary 900', value: '#1e3a8a', token: '--primary-900' },
  ],
  semantic: [
    { name: 'Success', value: '#10b981', token: '--success', description: '–£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' },
    { name: 'Warning', value: '#f59e0b', token: '--warning', description: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' },
    { name: 'Error', value: '#ef4444', token: '--error', description: '–û—à–∏–±–∫–∏' },
    { name: 'Info', value: '#3b82f6', token: '--info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
  ],
  educational: [
    { name: 'Swift', value: '#ff6b35', token: '--educational-swift', description: 'Swift –∫—É—Ä—Å—ã' },
    { name: 'UIKit', value: '#007aff', token: '--educational-uikit', description: 'UI/UX –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
    { name: 'Architecture', value: '#5856d6', token: '--educational-architecture', description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' },
    { name: 'Testing', value: '#34c759', token: '--educational-testing', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { name: 'Performance', value: '#ff3b30', token: '--educational-performance', description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
  ],
  neutral: [
    { name: 'Gray 50', value: '#f9fafb', token: '--gray-50' },
    { name: 'Gray 100', value: '#f3f4f6', token: '--gray-100' },
    { name: 'Gray 200', value: '#e5e7eb', token: '--gray-200' },
    { name: 'Gray 300', value: '#d1d5db', token: '--gray-300' },
    { name: 'Gray 400', value: '#9ca3af', token: '--gray-400' },
    { name: 'Gray 500', value: '#6b7280', token: '--gray-500' },
    { name: 'Gray 600', value: '#4b5563', token: '--gray-600' },
    { name: 'Gray 700', value: '#374151', token: '--gray-700' },
    { name: 'Gray 800', value: '#1f2937', token: '--gray-800' },
    { name: 'Gray 900', value: '#111827', token: '--gray-900' },
  ]
};

const ColorSwatch: React.FC<{ 
  name: string; 
  value: string; 
  token: string; 
  description?: string;
  large?: boolean;
}> = ({ name, value, token, description, large = false }) => (
  <div className={`group ${large ? 'col-span-2' : ''}`}>
    <div 
      className={`${large ? 'h-24' : 'h-16'} w-full rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer group-hover:scale-105`}
      style={{ backgroundColor: value }}
    />
    <div className="mt-3 space-y-1">
      <h4 className="font-medium text-gray-900 dark:text-gray-100 text-sm">
        {name}
      </h4>
      <p className="text-xs text-gray-500 dark:text-gray-400 font-mono">
        {value}
      </p>
      <p className="text-xs text-gray-400 dark:text-gray-500 font-mono">
        var({token})
      </p>
      {description && (
        <p className="text-xs text-gray-500 dark:text-gray-400">
          {description}
        </p>
      )}
    </div>
  </div>
);

export const PrimaryColors: Story = {
  render: () => (
    <div className="p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
          üîµ Primary Colors
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          –û—Å–Ω–æ–≤–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å —Ç–µ–º–æ–π Telegram.
        </p>
      </div>
      
      <div className="grid grid-cols-2 md:grid-cols-5 gap-6">
        {colors.primary.map((color) => (
          <ColorSwatch
            key={color.name}
            name={color.name}
            value={color.value}
            token={color.token}
          />
        ))}
      </div>

      <div className="mt-12 p-6 bg-gray-50 dark:bg-gray-800 rounded-xl">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
          üí° Usage Guidelines
        </h3>
        <div className="grid md:grid-cols-2 gap-6 text-sm">
          <div>
            <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-2">‚úÖ Do</h4>
            <ul className="space-y-1 text-gray-600 dark:text-gray-400">
              <li>‚Ä¢ Use Primary 500-600 for main actions</li>
              <li>‚Ä¢ Use lighter shades for backgrounds</li>
              <li>‚Ä¢ Use darker shades for text on light</li>
              <li>‚Ä¢ Maintain contrast ratios WCAG AA+</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-2">‚ùå Don't</h4>
            <ul className="space-y-1 text-gray-600 dark:text-gray-400">
              <li>‚Ä¢ Use too many primary color variations</li>
              <li>‚Ä¢ Override Telegram theme colors</li>
              <li>‚Ä¢ Use primary for errors or warnings</li>
              <li>‚Ä¢ Create custom primary shades</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Primary color palette –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å Telegram —Ç–µ–º–∞–º–∏.',
      },
    },
  },
};

export const SemanticColors: Story = {
  render: () => (
    <div className="p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
          üéØ Semantic Colors
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {colors.semantic.map((color) => (
          <ColorSwatch
            key={color.name}
            name={color.name}
            value={color.value}
            token={color.token}
            description={color.description}
            large
          />
        ))}
      </div>

      {/* Usage Examples */}
      <div className="space-y-6">
        <div className="p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
          <div className="flex items-center gap-3">
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            <span className="text-green-800 dark:text-green-200 font-medium">
              ‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!
            </span>
          </div>
        </div>

        <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
          <div className="flex items-center gap-3">
            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <span className="text-yellow-800 dark:text-yellow-200 font-medium">
              ‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏
            </span>
          </div>
        </div>

        <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
          <div className="flex items-center gap-3">
            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
            <span className="text-red-800 dark:text-red-200 font-medium">
              ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            </span>
          </div>
        </div>

        <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <div className="flex items-center gap-3">
            <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
            <span className="text-blue-800 dark:text-blue-200 font-medium">
              ‚ÑπÔ∏è –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            </span>
          </div>
        </div>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.',
      },
    },
  },
};

export const EducationalColors: Story = {
  render: () => (
    <div className="p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
          üéì Educational Colors
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—ã—Å—Ç—Ä–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {colors.educational.map((color) => (
          <ColorSwatch
            key={color.name}
            name={color.name}
            value={color.value}
            token={color.token}
            description={color.description}
            large
          />
        ))}
      </div>

      {/* Course Cards Examples */}
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {colors.educational.map((color) => (
          <div key={color.name} className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
            <div className="flex items-center gap-3 mb-4">
              <div 
                className="w-12 h-12 rounded-lg flex items-center justify-center text-white font-bold"
                style={{ backgroundColor: color.value }}
              >
                {color.name.charAt(0)}
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 dark:text-gray-100">
                  {color.name} Course
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {color.description}
                </p>
              </div>
            </div>
            <div className="space-y-2">
              <div 
                className="h-2 rounded-full"
                style={{ backgroundColor: `${color.value}20` }}
              >
                <div 
                  className="h-2 rounded-full w-3/4"
                  style={{ backgroundColor: color.value }}
                />
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                Progress: 75%
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –∫—É—Ä—Å–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.',
      },
    },
  },
};

export const TelegramIntegration: Story = {
  render: () => (
    <div className="p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
          üì± Telegram Theme Integration
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–º–æ–π Telegram WebApp –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—â—É—â–µ–Ω–∏—è.
        </p>
      </div>

      <div className="space-y-8">
        {/* Telegram Variables */}
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white">
          <h3 className="text-xl font-semibold mb-4">
            Telegram CSS Variables
          </h3>
          <div className="grid md:grid-cols-2 gap-4 text-sm font-mono">
            <div className="space-y-2">
              <div>var(--tg-bg-color)</div>
              <div>var(--tg-text-color)</div>
              <div>var(--tg-hint-color)</div>
              <div>var(--tg-link-color)</div>
            </div>
            <div className="space-y-2">
              <div>var(--tg-button-color)</div>
              <div>var(--tg-button-text-color)</div>
              <div>var(--tg-secondary-bg-color)</div>
              <div>var(--tg-header-bg-color)</div>
            </div>
          </div>
        </div>

        {/* Theme Examples */}
        <div className="grid md:grid-cols-2 gap-6">
          {/* Light Theme Example */}
          <div className="bg-white border border-gray-200 rounded-xl p-6">
            <h4 className="font-semibold text-gray-900 mb-4">‚òÄÔ∏è Light Theme</h4>
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <span className="text-blue-900">Primary Button</span>
                <div className="w-4 h-4 bg-blue-500 rounded"></div>
              </div>
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-700">Secondary Text</span>
                <div className="w-4 h-4 bg-gray-400 rounded"></div>
              </div>
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <span className="text-green-800">Success State</span>
                <div className="w-4 h-4 bg-green-500 rounded"></div>
              </div>
            </div>
          </div>

          {/* Dark Theme Example */}
          <div className="bg-gray-900 border border-gray-700 rounded-xl p-6">
            <h4 className="font-semibold text-gray-100 mb-4">üåô Dark Theme</h4>
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 bg-blue-900/30 rounded-lg">
                <span className="text-blue-200">Primary Button</span>
                <div className="w-4 h-4 bg-blue-400 rounded"></div>
              </div>
              <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                <span className="text-gray-300">Secondary Text</span>
                <div className="w-4 h-4 bg-gray-500 rounded"></div>
              </div>
              <div className="flex items-center justify-between p-3 bg-green-900/30 rounded-lg">
                <span className="text-green-200">Success State</span>
                <div className="w-4 h-4 bg-green-400 rounded"></div>
              </div>
            </div>
          </div>
        </div>

        {/* Code Example */}
        <div className="bg-gray-50 dark:bg-gray-800 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
            üîß Usage Example
          </h3>
          <pre className="text-sm text-gray-600 dark:text-gray-400 overflow-x-auto">
{`// CSS Custom Properties with Telegram fallbacks
.button-primary {
  background: var(--tg-button-color, theme(colors.blue.500));
  color: var(--tg-button-text-color, white);
}

.text-secondary {
  color: var(--tg-hint-color, theme(colors.gray.500));
}

.background-primary {
  background: var(--tg-bg-color, theme(colors.white));
}`}
          </pre>
        </div>
      </div>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π Telegram WebApp –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—â—É—â–µ–Ω–∏—è.',
      },
    },
  },
};